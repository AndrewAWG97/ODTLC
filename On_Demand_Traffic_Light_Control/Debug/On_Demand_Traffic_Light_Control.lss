
On_Demand_Traffic_Light_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001da6  00001e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800168  00800168  00001f42  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb9  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00004c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00004e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000085c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000097a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00009960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00009c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ea       	ldi	r30, 0xA6	; 166
      78:	fd e1       	ldi	r31, 0x1D	; 29
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <main>
      8a:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <delay_ms>:
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : Make delays                                                 *
 ******************************************************************************/

void delay_ms(uint16 T_delay){
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	68 97       	sbiw	r28, 0x18	; 24
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	98 8f       	std	Y+24, r25	; 0x18
     e4c:	8f 8b       	std	Y+23, r24	; 0x17


	uint16  T_initValue = 0;
     e4e:	1e 8a       	std	Y+22, r1	; 0x16
     e50:	1d 8a       	std	Y+21, r1	; 0x15
	uint16 Number_Overflow = 0;
     e52:	1c 8a       	std	Y+20, r1	; 0x14
     e54:	1b 8a       	std	Y+19, r1	; 0x13
	uint16 OverFlows_counter = 0;
     e56:	1a 8a       	std	Y+18, r1	; 0x12
     e58:	19 8a       	std	Y+17, r1	; 0x11

	 /*Set CPU frequency & prescaler*/
	float32 Freq_CPU  = F_CPU;
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	94 e2       	ldi	r25, 0x24	; 36
     e5e:	a4 e7       	ldi	r26, 0x74	; 116
     e60:	b9 e4       	ldi	r27, 0x49	; 73
     e62:	8d 87       	std	Y+13, r24	; 0x0d
     e64:	9e 87       	std	Y+14, r25	; 0x0e
     e66:	af 87       	std	Y+15, r26	; 0x0f
     e68:	b8 8b       	std	Y+16, r27	; 0x10
	float32 Prescaler = PRESCALER;
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e8       	ldi	r26, 0x80	; 128
     e70:	b3 e4       	ldi	r27, 0x43	; 67
     e72:	89 87       	std	Y+9, r24	; 0x09
     e74:	9a 87       	std	Y+10, r25	; 0x0a
     e76:	ab 87       	std	Y+11, r26	; 0x0b
     e78:	bc 87       	std	Y+12, r27	; 0x0c

	/* Calculate system tick*/
	float64 T_tick = Prescaler/Freq_CPU;
     e7a:	69 85       	ldd	r22, Y+9	; 0x09
     e7c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e80:	9c 85       	ldd	r25, Y+12	; 0x0c
     e82:	2d 85       	ldd	r18, Y+13	; 0x0d
     e84:	3e 85       	ldd	r19, Y+14	; 0x0e
     e86:	4f 85       	ldd	r20, Y+15	; 0x0f
     e88:	58 89       	ldd	r21, Y+16	; 0x10
     e8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8d 83       	std	Y+5, r24	; 0x05
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	af 83       	std	Y+7, r26	; 0x07
     e98:	b8 87       	std	Y+8, r27	; 0x08

	 /*Calculate Timer maximum delay*/
	float64 T_MaxDelay = T_tick * 256 * 1000; //(1<<8) is 2 power n bits n = 8 and convert it to ms
     e9a:	6d 81       	ldd	r22, Y+5	; 0x05
     e9c:	7e 81       	ldd	r23, Y+6	; 0x06
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	53 e4       	ldi	r21, 0x43	; 67
     eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4a e7       	ldi	r20, 0x7A	; 122
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	ab 83       	std	Y+3, r26	; 0x03
     ecc:	bc 83       	std	Y+4, r27	; 0x04

	if(T_delay < T_MaxDelay){
     ece:	8f 89       	ldd	r24, Y+23	; 0x17
     ed0:	98 8d       	ldd	r25, Y+24	; 0x18
     ed2:	cc 01       	movw	r24, r24
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	29 81       	ldd	r18, Y+1	; 0x01
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	4b 81       	ldd	r20, Y+3	; 0x03
     eee:	5c 81       	ldd	r21, Y+4	; 0x04
     ef0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	54 f5       	brge	.+84     	; 0xf4c <delay_ms+0x11e>

		T_initValue = ((T_MaxDelay - T_delay)/(T_tick));
     ef8:	8f 89       	ldd	r24, Y+23	; 0x17
     efa:	98 8d       	ldd	r25, Y+24	; 0x18
     efc:	cc 01       	movw	r24, r24
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f0a:	9b 01       	movw	r18, r22
     f0c:	ac 01       	movw	r20, r24
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	7a 81       	ldd	r23, Y+2	; 0x02
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	3e 81       	ldd	r19, Y+6	; 0x06
     f26:	4f 81       	ldd	r20, Y+7	; 0x07
     f28:	58 85       	ldd	r21, Y+8	; 0x08
     f2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	bc 01       	movw	r22, r24
     f34:	cd 01       	movw	r24, r26
     f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	9e 8b       	std	Y+22, r25	; 0x16
     f40:	8d 8b       	std	Y+21, r24	; 0x15
		Number_Overflow = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9c 8b       	std	Y+20, r25	; 0x14
     f48:	8b 8b       	std	Y+19, r24	; 0x13
     f4a:	87 c0       	rjmp	.+270    	; 0x105a <delay_ms+0x22c>

	}else if(T_delay  == T_MaxDelay){
     f4c:	8f 89       	ldd	r24, Y+23	; 0x17
     f4e:	98 8d       	ldd	r25, Y+24	; 0x18
     f50:	cc 01       	movw	r24, r24
     f52:	a0 e0       	ldi	r26, 0x00	; 0
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	29 81       	ldd	r18, Y+1	; 0x01
     f68:	3a 81       	ldd	r19, Y+2	; 0x02
     f6a:	4b 81       	ldd	r20, Y+3	; 0x03
     f6c:	5c 81       	ldd	r21, Y+4	; 0x04
     f6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
     f72:	88 23       	and	r24, r24
     f74:	39 f4       	brne	.+14     	; 0xf84 <delay_ms+0x156>
		T_initValue = 0;
     f76:	1e 8a       	std	Y+22, r1	; 0x16
     f78:	1d 8a       	std	Y+21, r1	; 0x15
		Number_Overflow = 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	9c 8b       	std	Y+20, r25	; 0x14
     f80:	8b 8b       	std	Y+19, r24	; 0x13
     f82:	6b c0       	rjmp	.+214    	; 0x105a <delay_ms+0x22c>


	}else{
		 /*Calculate number of overflows*/

		Number_Overflow = mceil((float64)T_delay, T_MaxDelay);
     f84:	8f 89       	ldd	r24, Y+23	; 0x17
     f86:	98 8d       	ldd	r25, Y+24	; 0x18
     f88:	cc 01       	movw	r24, r24
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	29 81       	ldd	r18, Y+1	; 0x01
     fa0:	3a 81       	ldd	r19, Y+2	; 0x02
     fa2:	4b 81       	ldd	r20, Y+3	; 0x03
     fa4:	5c 81       	ldd	r21, Y+4	; 0x04
     fa6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	bc 01       	movw	r22, r24
     fb0:	cd 01       	movw	r24, r26
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	4b 81       	ldd	r20, Y+3	; 0x03
     fcc:	5c 81       	ldd	r21, Y+4	; 0x04
     fce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9c 8b       	std	Y+20, r25	; 0x14
     fe4:	8b 8b       	std	Y+19, r24	; 0x13
		T_initValue = 256 - ((double)T_delay/T_tick) / Number_Overflow;
     fe6:	8f 89       	ldd	r24, Y+23	; 0x17
     fe8:	98 8d       	ldd	r25, Y+24	; 0x18
     fea:	cc 01       	movw	r24, r24
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	2d 81       	ldd	r18, Y+5	; 0x05
    1002:	3e 81       	ldd	r19, Y+6	; 0x06
    1004:	4f 81       	ldd	r20, Y+7	; 0x07
    1006:	58 85       	ldd	r21, Y+8	; 0x08
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	7c 01       	movw	r14, r24
    1012:	8d 01       	movw	r16, r26
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	cc 01       	movw	r24, r24
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1026:	9b 01       	movw	r18, r22
    1028:	ac 01       	movw	r20, r24
    102a:	c8 01       	movw	r24, r16
    102c:	b7 01       	movw	r22, r14
    102e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	9c 01       	movw	r18, r24
    1038:	ad 01       	movw	r20, r26
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	93 e4       	ldi	r25, 0x43	; 67
    1042:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e 8b       	std	Y+22, r25	; 0x16
    1058:	8d 8b       	std	Y+21, r24	; 0x15

	}

	TCNT0 = T_initValue;
    105a:	e2 e5       	ldi	r30, 0x52	; 82
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8d 89       	ldd	r24, Y+21	; 0x15
    1060:	80 83       	st	Z, r24
	 /*Configure the timer control register
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/256 CS00=1 CS01=0 CS02=0*/
	SET_BIT(TCCR0, CS02);
    1062:	a3 e5       	ldi	r26, 0x53	; 83
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e3 e5       	ldi	r30, 0x53	; 83
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	84 60       	ori	r24, 0x04	; 4
    106e:	8c 93       	st	X, r24
    1070:	15 c0       	rjmp	.+42     	; 0x109c <delay_ms+0x26e>

	while(OverFlows_counter < Number_Overflow){
		/* Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)*/
		while( READ_BIT(TIFR, TOV0) == 0 );
    1072:	e8 e5       	ldi	r30, 0x58	; 88
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	81 70       	andi	r24, 0x01	; 1
    107e:	90 70       	andi	r25, 0x00	; 0
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	b9 f3       	breq	.-18     	; 0x1072 <delay_ms+0x244>

		/* Clear TOV0 bit by set its value*/
		SET_BIT(TIFR,0);
    1084:	a8 e5       	ldi	r26, 0x58	; 88
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e8 e5       	ldi	r30, 0x58	; 88
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	8c 93       	st	X, r24

		OverFlows_counter++;
    1092:	89 89       	ldd	r24, Y+17	; 0x11
    1094:	9a 89       	ldd	r25, Y+18	; 0x12
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	9a 8b       	std	Y+18, r25	; 0x12
    109a:	89 8b       	std	Y+17, r24	; 0x11
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/256 CS00=1 CS01=0 CS02=0*/
	SET_BIT(TCCR0, CS02);

	while(OverFlows_counter < Number_Overflow){
    109c:	29 89       	ldd	r18, Y+17	; 0x11
    109e:	3a 89       	ldd	r19, Y+18	; 0x12
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	28 17       	cp	r18, r24
    10a6:	39 07       	cpc	r19, r25
    10a8:	20 f3       	brcs	.-56     	; 0x1072 <delay_ms+0x244>
		SET_BIT(TIFR,0);

		OverFlows_counter++;
	}
	/* Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)*/
	TCCR0 = 0;
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	10 82       	st	Z, r1
}
    10b0:	68 96       	adiw	r28, 0x18	; 24
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	08 95       	ret

000010ca <INT0_Init>:



/* External INT0 enable and configuration function */
void INT0_Init(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, 7);                    // Disable interrupts by clearing I-bit
    10d2:	af e5       	ldi	r26, 0x5F	; 95
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ef e5       	ldi	r30, 0x5F	; 95
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8f 77       	andi	r24, 0x7F	; 127
    10de:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD, PD2);                  // Configure INT0/PD2 as input pin
    10e0:	a1 e3       	ldi	r26, 0x31	; 49
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e1 e3       	ldi	r30, 0x31	; 49
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	8c 93       	st	X, r24
	SET_BIT(GICR, INT0);                   // Enable external interrupt pin INT0
    10ee:	ab e5       	ldi	r26, 0x5B	; 91
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e5       	ldi	r30, 0x5B	; 91
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 64       	ori	r24, 0x40	; 64
    10fa:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00) | (1<<ISC01);  	   // Trigger INT0 with the raising edge
    10fc:	a5 e5       	ldi	r26, 0x55	; 85
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e5       	ldi	r30, 0x55	; 85
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	83 60       	ori	r24, 0x03	; 3
    1108:	8c 93       	st	X, r24
	SET_BIT(SREG, 7);                      // Enable interrupts by setting I-bit
    110a:	af e5       	ldi	r26, 0x5F	; 95
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ef e5       	ldi	r30, 0x5F	; 95
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8c 93       	st	X, r24
}
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <DIO_init>:
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : initialize the DIO pin in the selected port                 *
 *                with suitable direction input or output                     *
 ******************************************************************************/
void DIO_init(uint8 pinNumber, DIO_Port portNumber, DIO_PinDirectionType direction){
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_init+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_init+0x8>
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	6a 83       	std	Y+2, r22	; 0x02
    1130:	4b 83       	std	Y+3, r20	; 0x03
	switch(portNumber){
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3d 83       	std	Y+5, r19	; 0x05
    113a:	2c 83       	std	Y+4, r18	; 0x04
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	91 05       	cpc	r25, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <DIO_init+0x2a>
    1146:	47 c0       	rjmp	.+142    	; 0x11d6 <DIO_init+0xb8>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <DIO_init+0x3e>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	71 f0       	breq	.+28     	; 0x1176 <DIO_init+0x58>
    115a:	cb c0       	rjmp	.+406    	; 0x12f2 <DIO_init+0x1d4>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_init+0x4a>
    1166:	67 c0       	rjmp	.+206    	; 0x1236 <DIO_init+0x118>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <DIO_init+0x56>
    1172:	91 c0       	rjmp	.+290    	; 0x1296 <DIO_init+0x178>
    1174:	be c0       	rjmp	.+380    	; 0x12f2 <DIO_init+0x1d4>
	case PORT_A:
		if(output == direction){
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	a1 f4       	brne	.+40     	; 0x11a4 <DIO_init+0x86>
			SET_BIT(DDRA, pinNumber);
    117c:	aa e3       	ldi	r26, 0x3A	; 58
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ea e3       	ldi	r30, 0x3A	; 58
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_init+0x7c>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_init+0x78>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	a7 c0       	rjmp	.+334    	; 0x12f2 <DIO_init+0x1d4>
		}else if(input == direction){
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 23       	and	r24, r24
    11a8:	09 f0       	breq	.+2      	; 0x11ac <DIO_init+0x8e>
    11aa:	a3 c0       	rjmp	.+326    	; 0x12f2 <DIO_init+0x1d4>
			CLEAR_BIT(DDRA, pinNumber);
    11ac:	aa e3       	ldi	r26, 0x3A	; 58
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ea e3       	ldi	r30, 0x3A	; 58
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_init+0xac>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_init+0xa8>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	8e c0       	rjmp	.+284    	; 0x12f2 <DIO_init+0x1d4>
		}
		break;
	case PORT_B:
		if(output == direction){
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	a1 f4       	brne	.+40     	; 0x1204 <DIO_init+0xe6>
			SET_BIT(DDRB, pinNumber);
    11dc:	a7 e3       	ldi	r26, 0x37	; 55
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e7 e3       	ldi	r30, 0x37	; 55
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_init+0xdc>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_init+0xd8>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	77 c0       	rjmp	.+238    	; 0x12f2 <DIO_init+0x1d4>
		}else if(input == direction){
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 23       	and	r24, r24
    1208:	09 f0       	breq	.+2      	; 0x120c <DIO_init+0xee>
    120a:	73 c0       	rjmp	.+230    	; 0x12f2 <DIO_init+0x1d4>
			CLEAR_BIT(DDRB, pinNumber);
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_init+0x10c>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_init+0x108>
    122e:	80 95       	com	r24
    1230:	84 23       	and	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	5e c0       	rjmp	.+188    	; 0x12f2 <DIO_init+0x1d4>
		}
		break;
	case PORT_C:
		if(output == direction){
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	a1 f4       	brne	.+40     	; 0x1264 <DIO_init+0x146>
			SET_BIT(DDRC, pinNumber);
    123c:	a4 e3       	ldi	r26, 0x34	; 52
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e4 e3       	ldi	r30, 0x34	; 52
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_init+0x13c>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_init+0x138>
    125e:	84 2b       	or	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	47 c0       	rjmp	.+142    	; 0x12f2 <DIO_init+0x1d4>
		}else if(input == direction){
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 23       	and	r24, r24
    1268:	09 f0       	breq	.+2      	; 0x126c <DIO_init+0x14e>
    126a:	43 c0       	rjmp	.+134    	; 0x12f2 <DIO_init+0x1d4>
			CLEAR_BIT(DDRC, pinNumber);
    126c:	a4 e3       	ldi	r26, 0x34	; 52
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e4 e3       	ldi	r30, 0x34	; 52
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_init+0x16c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_init+0x168>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	2e c0       	rjmp	.+92     	; 0x12f2 <DIO_init+0x1d4>
		}
		break;
	case PORT_D:
		if(output == direction){
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <DIO_init+0x1a6>
			SET_BIT(DDRD, pinNumber);
    129c:	a1 e3       	ldi	r26, 0x31	; 49
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_init+0x19c>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_init+0x198>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	17 c0       	rjmp	.+46     	; 0x12f2 <DIO_init+0x1d4>
		}else if(input == direction){
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 23       	and	r24, r24
    12c8:	a1 f4       	brne	.+40     	; 0x12f2 <DIO_init+0x1d4>
			CLEAR_BIT(DDRD, pinNumber);
    12ca:	a1 e3       	ldi	r26, 0x31	; 49
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e1 e3       	ldi	r30, 0x31	; 49
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_init+0x1ca>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_init+0x1c6>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
		}
		break;
	}
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <DIO_write>:
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : Write on pin high or low                                    *
 ******************************************************************************/

void DIO_write(uint8 pinNumber, DIO_Port portNumber, uint8 status){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <DIO_write+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <DIO_write+0x8>
    130a:	0f 92       	push	r0
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	6a 83       	std	Y+2, r22	; 0x02
    1314:	4b 83       	std	Y+3, r20	; 0x03
	switch(portNumber){
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3d 83       	std	Y+5, r19	; 0x05
    131e:	2c 83       	std	Y+4, r18	; 0x04
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <DIO_write+0x2a>
    132a:	47 c0       	rjmp	.+142    	; 0x13ba <DIO_write+0xb8>
    132c:	2c 81       	ldd	r18, Y+4	; 0x04
    132e:	3d 81       	ldd	r19, Y+5	; 0x05
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <DIO_write+0x3e>
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	71 f0       	breq	.+28     	; 0x135a <DIO_write+0x58>
    133e:	cb c0       	rjmp	.+406    	; 0x14d6 <DIO_write+0x1d4>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <DIO_write+0x4a>
    134a:	67 c0       	rjmp	.+206    	; 0x141a <DIO_write+0x118>
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	91 05       	cpc	r25, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <DIO_write+0x56>
    1356:	91 c0       	rjmp	.+290    	; 0x147a <DIO_write+0x178>
    1358:	be c0       	rjmp	.+380    	; 0x14d6 <DIO_write+0x1d4>
	case PORT_A:
		if(HIGH == status){
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	a1 f4       	brne	.+40     	; 0x1388 <DIO_write+0x86>
			SET_BIT(PORTA, pinNumber);
    1360:	ab e3       	ldi	r26, 0x3B	; 59
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_write+0x7c>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_write+0x78>
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	a7 c0       	rjmp	.+334    	; 0x14d6 <DIO_write+0x1d4>
		}else if(LOW == status){
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 23       	and	r24, r24
    138c:	09 f0       	breq	.+2      	; 0x1390 <DIO_write+0x8e>
    138e:	a3 c0       	rjmp	.+326    	; 0x14d6 <DIO_write+0x1d4>
			CLEAR_BIT(PORTA, pinNumber);
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_write+0xac>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_write+0xa8>
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	8e c0       	rjmp	.+284    	; 0x14d6 <DIO_write+0x1d4>
		}
		break;
	case PORT_B:
		if(HIGH == status){
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	a1 f4       	brne	.+40     	; 0x13e8 <DIO_write+0xe6>
			SET_BIT(PORTB, pinNumber);
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_write+0xdc>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_write+0xd8>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	77 c0       	rjmp	.+238    	; 0x14d6 <DIO_write+0x1d4>
		}else if(LOW == status){
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 23       	and	r24, r24
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <DIO_write+0xee>
    13ee:	73 c0       	rjmp	.+230    	; 0x14d6 <DIO_write+0x1d4>
			CLEAR_BIT(PORTB, pinNumber);
    13f0:	a8 e3       	ldi	r26, 0x38	; 56
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e8 e3       	ldi	r30, 0x38	; 56
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_write+0x10c>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_write+0x108>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	5e c0       	rjmp	.+188    	; 0x14d6 <DIO_write+0x1d4>
		}
		break;
	case PORT_C:
		if(HIGH == status){
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	a1 f4       	brne	.+40     	; 0x1448 <DIO_write+0x146>
			SET_BIT(PORTC, pinNumber);
    1420:	a5 e3       	ldi	r26, 0x35	; 53
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e3       	ldi	r30, 0x35	; 53
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_write+0x13c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_write+0x138>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	47 c0       	rjmp	.+142    	; 0x14d6 <DIO_write+0x1d4>
		}else if(LOW == status){
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 23       	and	r24, r24
    144c:	09 f0       	breq	.+2      	; 0x1450 <DIO_write+0x14e>
    144e:	43 c0       	rjmp	.+134    	; 0x14d6 <DIO_write+0x1d4>
			CLEAR_BIT(PORTC, pinNumber);
    1450:	a5 e3       	ldi	r26, 0x35	; 53
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e3       	ldi	r30, 0x35	; 53
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_write+0x16c>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_write+0x168>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	2e c0       	rjmp	.+92     	; 0x14d6 <DIO_write+0x1d4>
		}
		break;
	case PORT_D:
		if(HIGH == status){
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	a1 f4       	brne	.+40     	; 0x14a8 <DIO_write+0x1a6>
			SET_BIT(PORTD, pinNumber);
    1480:	a2 e3       	ldi	r26, 0x32	; 50
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e2 e3       	ldi	r30, 0x32	; 50
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_write+0x19c>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_write+0x198>
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	17 c0       	rjmp	.+46     	; 0x14d6 <DIO_write+0x1d4>
		}else if(LOW == status){
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 23       	and	r24, r24
    14ac:	a1 f4       	brne	.+40     	; 0x14d6 <DIO_write+0x1d4>
			CLEAR_BIT(PORTD, pinNumber);
    14ae:	a2 e3       	ldi	r26, 0x32	; 50
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e2 e3       	ldi	r30, 0x32	; 50
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_write+0x1ca>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_write+0x1c6>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
		}
		break;
	}
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <DIO_toggle>:
 * Inputs       : Pin number, Port Number                                     *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : toggle the pin                                              *
 ******************************************************************************/
void DIO_toggle(uint8 pinNumber, DIO_Port portNumber){
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_toggle+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <DIO_toggle+0x8>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber){
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3c 83       	std	Y+4, r19	; 0x04
    14fe:	2b 83       	std	Y+3, r18	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	49 f1       	breq	.+82     	; 0x155c <DIO_toggle+0x76>
    150a:	2b 81       	ldd	r18, Y+3	; 0x03
    150c:	3c 81       	ldd	r19, Y+4	; 0x04
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <DIO_toggle+0x38>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_toggle+0x4e>
    151c:	5a c0       	rjmp	.+180    	; 0x15d2 <DIO_toggle+0xec>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	71 f1       	breq	.+92     	; 0x1584 <DIO_toggle+0x9e>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	e9 f1       	breq	.+122    	; 0x15ac <DIO_toggle+0xc6>
    1532:	4f c0       	rjmp	.+158    	; 0x15d2 <DIO_toggle+0xec>
	case PORT_A:
		TOGGLE_BIT(PORTA, pinNumber);
    1534:	ab e3       	ldi	r26, 0x3B	; 59
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	eb e3       	ldi	r30, 0x3B	; 59
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_toggle+0x6c>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_toggle+0x68>
    1556:	84 27       	eor	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	3b c0       	rjmp	.+118    	; 0x15d2 <DIO_toggle+0xec>
		break;
	case PORT_B:
		TOGGLE_BIT(PORTB, pinNumber);
    155c:	a8 e3       	ldi	r26, 0x38	; 56
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_toggle+0x94>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_toggle+0x90>
    157e:	84 27       	eor	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	27 c0       	rjmp	.+78     	; 0x15d2 <DIO_toggle+0xec>
		break;
	case PORT_C:
		TOGGLE_BIT(PORTC, pinNumber);
    1584:	a5 e3       	ldi	r26, 0x35	; 53
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e3       	ldi	r30, 0x35	; 53
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_toggle+0xbc>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_toggle+0xb8>
    15a6:	84 27       	eor	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	13 c0       	rjmp	.+38     	; 0x15d2 <DIO_toggle+0xec>
		break;
	case PORT_D:
		TOGGLE_BIT(PORTD, pinNumber);
    15ac:	a2 e3       	ldi	r26, 0x32	; 50
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e2 e3       	ldi	r30, 0x32	; 50
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_toggle+0xe4>
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_toggle+0xe0>
    15ce:	84 27       	eor	r24, r20
    15d0:	8c 93       	st	X, r24
		break;
	}

}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_read>:
 *                to put the reading state in it                              *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : read pin state                                              *
 ******************************************************************************/
void DIO_read(uint8 pinNumber, DIO_Port portNumber, uint8 *state){
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_read+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_read+0x8>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <DIO_read+0xa>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
    15f2:	5c 83       	std	Y+4, r21	; 0x04
    15f4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portNumber){
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3e 83       	std	Y+6, r19	; 0x06
    15fe:	2d 83       	std	Y+5, r18	; 0x05
    1600:	4d 81       	ldd	r20, Y+5	; 0x05
    1602:	5e 81       	ldd	r21, Y+6	; 0x06
    1604:	41 30       	cpi	r20, 0x01	; 1
    1606:	51 05       	cpc	r21, r1
    1608:	a1 f1       	breq	.+104    	; 0x1672 <DIO_read+0x92>
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	34 f4       	brge	.+12     	; 0x1620 <DIO_read+0x40>
    1614:	2d 81       	ldd	r18, Y+5	; 0x05
    1616:	3e 81       	ldd	r19, Y+6	; 0x06
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	71 f0       	breq	.+28     	; 0x163a <DIO_read+0x5a>
    161e:	7c c0       	rjmp	.+248    	; 0x1718 <DIO_read+0x138>
    1620:	4d 81       	ldd	r20, Y+5	; 0x05
    1622:	5e 81       	ldd	r21, Y+6	; 0x06
    1624:	42 30       	cpi	r20, 0x02	; 2
    1626:	51 05       	cpc	r21, r1
    1628:	09 f4       	brne	.+2      	; 0x162c <DIO_read+0x4c>
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <DIO_read+0xca>
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	91 05       	cpc	r25, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <DIO_read+0x58>
    1636:	55 c0       	rjmp	.+170    	; 0x16e2 <DIO_read+0x102>
    1638:	6f c0       	rjmp	.+222    	; 0x1718 <DIO_read+0x138>
	case PORT_A:
		if(BIT_IS_SET(PINA, pinNumber)){
    163a:	e9 e3       	ldi	r30, 0x39	; 57
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_read+0x72>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_read+0x6e>
    1656:	ca 01       	movw	r24, r20
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	90 70       	andi	r25, 0x00	; 0
    165c:	88 23       	and	r24, r24
    165e:	29 f0       	breq	.+10     	; 0x166a <DIO_read+0x8a>
			*state = HIGH;
    1660:	eb 81       	ldd	r30, Y+3	; 0x03
    1662:	fc 81       	ldd	r31, Y+4	; 0x04
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	80 83       	st	Z, r24
    1668:	57 c0       	rjmp	.+174    	; 0x1718 <DIO_read+0x138>
		}else{
			*state = LOW;
    166a:	eb 81       	ldd	r30, Y+3	; 0x03
    166c:	fc 81       	ldd	r31, Y+4	; 0x04
    166e:	10 82       	st	Z, r1
    1670:	53 c0       	rjmp	.+166    	; 0x1718 <DIO_read+0x138>
		}
		break;
	case PORT_B:
		if(BIT_IS_SET(PINB, pinNumber)){
    1672:	e6 e3       	ldi	r30, 0x36	; 54
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	88 2f       	mov	r24, r24
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a9 01       	movw	r20, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_read+0xaa>
    1686:	55 95       	asr	r21
    1688:	47 95       	ror	r20
    168a:	8a 95       	dec	r24
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_read+0xa6>
    168e:	ca 01       	movw	r24, r20
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	90 70       	andi	r25, 0x00	; 0
    1694:	88 23       	and	r24, r24
    1696:	29 f0       	breq	.+10     	; 0x16a2 <DIO_read+0xc2>
			*state = HIGH;
    1698:	eb 81       	ldd	r30, Y+3	; 0x03
    169a:	fc 81       	ldd	r31, Y+4	; 0x04
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 83       	st	Z, r24
    16a0:	3b c0       	rjmp	.+118    	; 0x1718 <DIO_read+0x138>
		}else{
			*state = LOW;
    16a2:	eb 81       	ldd	r30, Y+3	; 0x03
    16a4:	fc 81       	ldd	r31, Y+4	; 0x04
    16a6:	10 82       	st	Z, r1
    16a8:	37 c0       	rjmp	.+110    	; 0x1718 <DIO_read+0x138>
		}
		break;
	case PORT_C:
		if(BIT_IS_SET(PINC, pinNumber)){
    16aa:	e3 e3       	ldi	r30, 0x33	; 51
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a9 01       	movw	r20, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_read+0xe2>
    16be:	55 95       	asr	r21
    16c0:	47 95       	ror	r20
    16c2:	8a 95       	dec	r24
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_read+0xde>
    16c6:	ca 01       	movw	r24, r20
    16c8:	81 70       	andi	r24, 0x01	; 1
    16ca:	90 70       	andi	r25, 0x00	; 0
    16cc:	88 23       	and	r24, r24
    16ce:	29 f0       	breq	.+10     	; 0x16da <DIO_read+0xfa>
			*state = HIGH;
    16d0:	eb 81       	ldd	r30, Y+3	; 0x03
    16d2:	fc 81       	ldd	r31, Y+4	; 0x04
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 83       	st	Z, r24
    16d8:	1f c0       	rjmp	.+62     	; 0x1718 <DIO_read+0x138>
		}else{
			*state = LOW;
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	10 82       	st	Z, r1
    16e0:	1b c0       	rjmp	.+54     	; 0x1718 <DIO_read+0x138>
		}
		break;
	case PORT_D:
		if(BIT_IS_SET(PIND, pinNumber)){
    16e2:	e0 e3       	ldi	r30, 0x30	; 48
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_read+0x11a>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_read+0x116>
    16fe:	ca 01       	movw	r24, r20
    1700:	81 70       	andi	r24, 0x01	; 1
    1702:	90 70       	andi	r25, 0x00	; 0
    1704:	88 23       	and	r24, r24
    1706:	29 f0       	breq	.+10     	; 0x1712 <DIO_read+0x132>
			*state = HIGH;
    1708:	eb 81       	ldd	r30, Y+3	; 0x03
    170a:	fc 81       	ldd	r31, Y+4	; 0x04
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 83       	st	Z, r24
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <DIO_read+0x138>
		}else{
			*state = LOW;
    1712:	eb 81       	ldd	r30, Y+3	; 0x03
    1714:	fc 81       	ldd	r31, Y+4	; 0x04
    1716:	10 82       	st	Z, r1
		}
		break;
	}
}
    1718:	26 96       	adiw	r28, 0x06	; 6
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <DIO_Port_write>:
 * Inputs       : port number , value : high or low                           *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : write on the entire port                                    *
 ******************************************************************************/
void DIO_Port_write(DIO_Port portNumber, uint8 value){
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_Port_write+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_Port_write+0x8>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	6a 83       	std	Y+2, r22	; 0x02
	switch(portNumber){
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3c 83       	std	Y+4, r19	; 0x04
    1742:	2b 83       	std	Y+3, r18	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	91 05       	cpc	r25, r1
    174c:	09 f1       	breq	.+66     	; 0x1790 <DIO_Port_write+0x66>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <DIO_Port_write+0x38>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	61 f0       	breq	.+24     	; 0x1778 <DIO_Port_write+0x4e>
    1760:	3a c0       	rjmp	.+116    	; 0x17d6 <DIO_Port_write+0xac>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	f1 f0       	breq	.+60     	; 0x17a8 <DIO_Port_write+0x7e>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	29 f1       	breq	.+74     	; 0x17c0 <DIO_Port_write+0x96>
    1776:	2f c0       	rjmp	.+94     	; 0x17d6 <DIO_Port_write+0xac>
	case PORT_A:
		if(value == HIGH){
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	29 f4       	brne	.+10     	; 0x1788 <DIO_Port_write+0x5e>
			PORTA = 0xFF;
    177e:	eb e3       	ldi	r30, 0x3B	; 59
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	80 83       	st	Z, r24
    1786:	27 c0       	rjmp	.+78     	; 0x17d6 <DIO_Port_write+0xac>
		}else{
			PORTA = 0x00;
    1788:	eb e3       	ldi	r30, 0x3B	; 59
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
    178e:	23 c0       	rjmp	.+70     	; 0x17d6 <DIO_Port_write+0xac>
		}

		break;
	case PORT_B:
		if(value == HIGH){
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	29 f4       	brne	.+10     	; 0x17a0 <DIO_Port_write+0x76>
			PORTB = 0xFF;
    1796:	e8 e3       	ldi	r30, 0x38	; 56
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	80 83       	st	Z, r24
    179e:	1b c0       	rjmp	.+54     	; 0x17d6 <DIO_Port_write+0xac>
		}else{
			PORTB = 0x00;
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	10 82       	st	Z, r1
    17a6:	17 c0       	rjmp	.+46     	; 0x17d6 <DIO_Port_write+0xac>
		}
		break;
	case PORT_C:
		if(value == HIGH){
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	29 f4       	brne	.+10     	; 0x17b8 <DIO_Port_write+0x8e>
			PORTC = 0xFF;
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	80 83       	st	Z, r24
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <DIO_Port_write+0xac>
		}else{
			PORTC = 0x00;
    17b8:	e5 e3       	ldi	r30, 0x35	; 53
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	10 82       	st	Z, r1
    17be:	0b c0       	rjmp	.+22     	; 0x17d6 <DIO_Port_write+0xac>
		}
		break;
	case PORT_D:
		if(value == HIGH){
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <DIO_Port_write+0xa6>
			PORTD = 0xFF;
    17c6:	e2 e3       	ldi	r30, 0x32	; 50
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	80 83       	st	Z, r24
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <DIO_Port_write+0xac>
		}else{
			PORTD = 0x00;
    17d0:	e2 e3       	ldi	r30, 0x32	; 50
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	10 82       	st	Z, r1
		}
		break;
	}
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <LED_init>:
 * Inputs       : LED number & LED port                                       *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : initialize the LED pin in the selected port                 *
 ******************************************************************************/
void LED_init(uint8 LED_number, DIO_Port LED_port){
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <LED_init+0x6>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_init(LED_number, LED_port, output);
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	6a 81       	ldd	r22, Y+2	; 0x02
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 8f 08 	call	0x111e	; 0x111e <DIO_init>
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <LED_on>:
 * Inputs       : LED number & LED port                                       *
 * Outputs      : None                                                        *
 * Return Value : LED state                                                   *
 * Description  : Turn on the LED                                             *
 ******************************************************************************/
LED_status LED_on(uint8 LED_number, DIO_Port LED_port){
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <LED_on+0x6>
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(LED_number, LED_port, HIGH);
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	6a 81       	ldd	r22, Y+2	; 0x02
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_write>
	return ON;
    181e:	81 e0       	ldi	r24, 0x01	; 1
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <LED_off>:
 * Inputs       : LED number & LED port                                       *
 * Outputs      : None                                                        *
 * Return Value : LED state                                                   *
 * Description  : Turn off the LED                                            *
 ******************************************************************************/
LED_status LED_off(uint8 LED_number, DIO_Port LED_port){
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <LED_off+0x6>
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(LED_number, LED_port, LOW);
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	6a 81       	ldd	r22, Y+2	; 0x02
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_write>
	return OFF;
    1842:	80 e0       	ldi	r24, 0x00	; 0
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <LED_toggle>:
 * Inputs       : LED number & LED port                                       *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : toggle the LED                                              *
 ******************************************************************************/
void LED_toggle(uint8 LED_number, DIO_Port LED_port){
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <LED_toggle+0x6>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(LED_number, LED_port);
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	6a 81       	ldd	r22, Y+2	; 0x02
    1860:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <DIO_toggle>
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <LED_port_off>:
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : Turn off the whole port                                     *
 ******************************************************************************/

void LED_port_off(DIO_Port LED_port){
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
	DIO_Port_write(LED_port, LOW);
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_Port_write>
}
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <delay>:
#include "ECUAL/Delay Driver/delay.h"

void delay(int ms){
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <delay+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	delay_ms(ms);
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	0e 94 17 07 	call	0xe2e	; 0xe2e <delay_ms>
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <BUTTON_init>:
 * Inputs       : Button pin & Button port                                    *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : initialize the Button pin in the selected port              *
 ******************************************************************************/
void BUTTON_init(uint8 buttonPin, DIO_Port buttonPort){
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <BUTTON_init+0x6>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_init(buttonPin, buttonPort, input);
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	6a 81       	ldd	r22, Y+2	; 0x02
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 8f 08 	call	0x111e	; 0x111e <DIO_init>
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <BUTTON_getStatus>:
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : Get Button status                                           *
 ******************************************************************************/

void BUTTON_getStatus(uint8 buttonPin, DIO_Port buttonPort, uint8* status){
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <BUTTON_getStatus+0x6>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <BUTTON_getStatus+0x8>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	6a 83       	std	Y+2, r22	; 0x02
    18dc:	5c 83       	std	Y+4, r21	; 0x04
    18de:	4b 83       	std	Y+3, r20	; 0x03
	DIO_read(buttonPin, buttonPort, status);
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	6a 81       	ldd	r22, Y+2	; 0x02
    18e8:	a9 01       	movw	r20, r18
    18ea:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_read>
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <BUTTON_InterruptInit>:


void BUTTON_InterruptInit(void){
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
	INT0_Init();
    1904:	0e 94 65 08 	call	0x10ca	; 0x10ca <INT0_Init>
}
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <__vector_1>:
 * Return Value : None                                                        *
 * Description  : Interrupt handler                                           *
 ******************************************************************************/
/* External INT0 Interrupt Service Routine */
ISR(INT0_vect)
{
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	8f 93       	push	r24
    191a:	af 93       	push	r26
    191c:	bf 93       	push	r27
    191e:	ef 93       	push	r30
    1920:	ff 93       	push	r31
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
	/* Disable interrupts by clearing I-bit */
	CLEAR_BIT(SREG, 7);
    192a:	af e5       	ldi	r26, 0x5F	; 95
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ef e5       	ldi	r30, 0x5F	; 95
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 77       	andi	r24, 0x7F	; 127
    1936:	8c 93       	st	X, r24
	/* Change mode to pedestrians mode*/
	mode = PEDESTRIAN_MODE;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 68 01 	sts	0x0168, r24
	/* Enable interrupts by setting I-bit*/
	SET_BIT(SREG, 7);
    193e:	af e5       	ldi	r26, 0x5F	; 95
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	8f 91       	pop	r24
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <yellowBlinkNormalMode>:
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : Blink Yellow LED in normal mode                             *
 *                Includes a check on mode every iteration                    *
 ******************************************************************************/
void yellowBlinkNormalMode(){
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <yellowBlinkNormalMode+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
	Y_LED_CAR = ON;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 6a 01 	sts	0x016A, r24
	Y_LED_PED = ON;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	80 93 6d 01 	sts	0x016D, r24
	for(int i = 0; i < 10; i++){
    197a:	1a 82       	std	Y+2, r1	; 0x02
    197c:	19 82       	std	Y+1, r1	; 0x01
    197e:	15 c0       	rjmp	.+42     	; 0x19aa <yellowBlinkNormalMode+0x46>
		/* Check if the Pedestrians mode is selected*/
		if(mode != NORMAL_MODE){break;}
    1980:	80 91 68 01 	lds	r24, 0x0168
    1984:	88 23       	and	r24, r24
    1986:	b1 f4       	brne	.+44     	; 0x19b4 <yellowBlinkNormalMode+0x50>
		LED_toggle(YELLOW_LED, LED_CAR_PORT);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	0e 94 27 0c 	call	0x184e	; 0x184e <LED_toggle>
		LED_toggle(YELLOW_LED, LED_PED_PORT);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	0e 94 27 0c 	call	0x184e	; 0x184e <LED_toggle>
		delay(500);
    1998:	84 ef       	ldi	r24, 0xF4	; 244
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
 ******************************************************************************/
void yellowBlinkNormalMode(){
	/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
	Y_LED_CAR = ON;
	Y_LED_PED = ON;
	for(int i = 0; i < 10; i++){
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	8a 30       	cpi	r24, 0x0A	; 10
    19b0:	91 05       	cpc	r25, r1
    19b2:	34 f3       	brlt	.-52     	; 0x1980 <yellowBlinkNormalMode+0x1c>
		LED_toggle(YELLOW_LED, LED_CAR_PORT);
		LED_toggle(YELLOW_LED, LED_PED_PORT);
		delay(500);
	}

	LED_off(YELLOW_LED, LED_CAR_PORT);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
	LED_off(YELLOW_LED, LED_PED_PORT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
	Y_LED_CAR = OFF;
    19c4:	10 92 6a 01 	sts	0x016A, r1
	Y_LED_PED = OFF;
    19c8:	10 92 6d 01 	sts	0x016D, r1
}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <yellowBlinkPedMode>:
 * Inputs       : None                                                        *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : Blink both Yellow LEDs in Pedestrian mode                   *
 ******************************************************************************/
void yellowBlinkPedMode(){
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <yellowBlinkPedMode+0x6>
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
	/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
	Y_LED_CAR = ON;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	80 93 6a 01 	sts	0x016A, r24
	Y_LED_PED = ON;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 6d 01 	sts	0x016D, r24
	for(int i = 0; i < 10; i++){
    19ec:	1a 82       	std	Y+2, r1	; 0x02
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	11 c0       	rjmp	.+34     	; 0x1a14 <yellowBlinkPedMode+0x3e>
		LED_toggle(YELLOW_LED, LED_CAR_PORT);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	0e 94 27 0c 	call	0x184e	; 0x184e <LED_toggle>
		LED_toggle(YELLOW_LED, LED_PED_PORT);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	61 e0       	ldi	r22, 0x01	; 1
    19fe:	0e 94 27 0c 	call	0x184e	; 0x184e <LED_toggle>
		delay(500);
    1a02:	84 ef       	ldi	r24, 0xF4	; 244
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
 ******************************************************************************/
void yellowBlinkPedMode(){
	/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
	Y_LED_CAR = ON;
	Y_LED_PED = ON;
	for(int i = 0; i < 10; i++){
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	8a 30       	cpi	r24, 0x0A	; 10
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	54 f3       	brlt	.-44     	; 0x19f2 <yellowBlinkPedMode+0x1c>
		LED_toggle(YELLOW_LED, LED_CAR_PORT);
		LED_toggle(YELLOW_LED, LED_PED_PORT);
		delay(500);
	}

	LED_off(YELLOW_LED, LED_CAR_PORT);
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
	LED_off(YELLOW_LED, LED_PED_PORT);
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
	Y_LED_CAR = OFF;
    1a2e:	10 92 6a 01 	sts	0x016A, r1
	Y_LED_PED = OFF;
    1a32:	10 92 6d 01 	sts	0x016D, r1
}
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <end>:
 * Inputs       : None                                                        *
 * Outputs      : None                                                        *
 * Return Value : None                                                        *
 * Description  : end the pedestrian mode in case 1 & 2                       *
 ******************************************************************************/
void end(){
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62

	R_LED_CAR = LED_on(RED_LED, LED_CAR_PORT);
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1a50:	80 93 6b 01 	sts	0x016B, r24
	G_LED_PED = LED_on(GREEN_LED, LED_PED_PORT);
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1a5c:	80 93 6c 01 	sts	0x016C, r24
	/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
	yellowBlinkPedMode();
    1a60:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <yellowBlinkPedMode>
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <app_init>:

void app_init(){
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62

	/*Initialize interrupt*/
	BUTTON_InterruptInit();
    1a72:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <BUTTON_InterruptInit>

	/* Initialize Mode LED*/
	LED_init(MODE_PIN, MODE_PORT);
    1a76:	83 e0       	ldi	r24, 0x03	; 3
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>

	/*Initialize Car LEDs*/
	LED_init(GREEN_LED, LED_CAR_PORT);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>
	LED_init(YELLOW_LED, LED_CAR_PORT);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>
	LED_init(RED_LED, LED_CAR_PORT);
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>


	/*Initialize Car LEDs*/
	LED_init(GREEN_LED, LED_PED_PORT);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	61 e0       	ldi	r22, 0x01	; 1
    1a9a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>
	LED_init(YELLOW_LED, LED_PED_PORT);
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>
	LED_init(RED_LED, LED_PED_PORT);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <LED_init>

	BUTTON_init(BUTTON_PIN, BUTTON_PORT);
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <BUTTON_init>
}
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <app_start>:

void app_start(){
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <app_start+0x6>
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <app_start+0x8>
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <app_start+0xa>
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62


	LED_port_off(LED_CAR_PORT);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 37 0c 	call	0x186e	; 0x186e <LED_port_off>
	LED_port_off(LED_PED_PORT);
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0e 94 37 0c 	call	0x186e	; 0x186e <LED_port_off>


	switch(mode)
    1ad6:	80 91 68 01 	lds	r24, 0x0168
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3e 83       	std	Y+6, r19	; 0x06
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	39 f0       	breq	.+14     	; 0x1af8 <app_start+0x3c>
    1aea:	2d 81       	ldd	r18, Y+5	; 0x05
    1aec:	3e 81       	ldd	r19, Y+6	; 0x06
    1aee:	21 30       	cpi	r18, 0x01	; 1
    1af0:	31 05       	cpc	r19, r1
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <app_start+0x3a>
    1af4:	6c c0       	rjmp	.+216    	; 0x1bce <app_start+0x112>
    1af6:	c0 c0       	rjmp	.+384    	; 0x1c78 <app_start+0x1bc>
	{
	case NORMAL_MODE:
		LED_off(MODE_PIN, MODE_PORT);
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>

		/* Start Normal mode */
		/* Cars Green LED is ON for 5 seconds*/
		G_LED_CAR=  LED_on(GREEN_LED, LED_CAR_PORT);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1b08:	80 93 69 01 	sts	0x0169, r24
		/* Pedestrians Red LED is ON for 5 seconds*/
		R_LED_PED = LED_on(RED_LED, LED_PED_PORT);
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1b14:	80 93 6e 01 	sts	0x016E, r24

		/* Check if the Pedestrians mode is selected*/

		for(int i = 0; i < 10; i++){
    1b18:	1c 82       	std	Y+4, r1	; 0x04
    1b1a:	1b 82       	std	Y+3, r1	; 0x03
    1b1c:	0d c0       	rjmp	.+26     	; 0x1b38 <app_start+0x7c>
			if(mode != NORMAL_MODE){break;}
    1b1e:	80 91 68 01 	lds	r24, 0x0168
    1b22:	88 23       	and	r24, r24
    1b24:	71 f4       	brne	.+28     	; 0x1b42 <app_start+0x86>
			delay(500);
    1b26:	84 ef       	ldi	r24, 0xF4	; 244
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
		/* Pedestrians Red LED is ON for 5 seconds*/
		R_LED_PED = LED_on(RED_LED, LED_PED_PORT);

		/* Check if the Pedestrians mode is selected*/

		for(int i = 0; i < 10; i++){
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	8a 30       	cpi	r24, 0x0A	; 10
    1b3e:	91 05       	cpc	r25, r1
    1b40:	74 f3       	brlt	.-36     	; 0x1b1e <app_start+0x62>
			if(mode != NORMAL_MODE){break;}
			delay(500);
		}

		/* Check if the Pedestrians mode is selected*/
		if(mode != NORMAL_MODE){break;}
    1b42:	80 91 68 01 	lds	r24, 0x0168
    1b46:	88 23       	and	r24, r24
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <app_start+0x90>
    1b4a:	96 c0       	rjmp	.+300    	; 0x1c78 <app_start+0x1bc>

		/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
		yellowBlinkNormalMode();
    1b4c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <yellowBlinkNormalMode>

		/* Check if the Pedestrians mode is selected*/
		if(mode != NORMAL_MODE){break;}
    1b50:	80 91 68 01 	lds	r24, 0x0168
    1b54:	88 23       	and	r24, r24
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <app_start+0x9e>
    1b58:	8f c0       	rjmp	.+286    	; 0x1c78 <app_start+0x1bc>

		/* Cars Green LED turned off for 5 seconds*/
		G_LED_CAR=  LED_off(GREEN_LED, LED_CAR_PORT);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
    1b62:	80 93 69 01 	sts	0x0169, r24
		/* Pedestrians Red LED turned off for 5 seconds*/
		R_LED_PED = LED_off(RED_LED, LED_PED_PORT);
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
    1b6e:	80 93 6e 01 	sts	0x016E, r24

		/* Car Red LED is ON for 5 seconds*/
		R_LED_CAR = LED_on(RED_LED, LED_CAR_PORT);
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1b7a:	80 93 6b 01 	sts	0x016B, r24
		/* Pedestrians Green LED is ON for 5 seconds*/
		G_LED_PED = LED_on(GREEN_LED, LED_PED_PORT);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1b86:	80 93 6c 01 	sts	0x016C, r24

		/* Check if the Pedestrians mode is selected*/
		if(mode != NORMAL_MODE){break;}
    1b8a:	80 91 68 01 	lds	r24, 0x0168
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <app_start+0xd8>
    1b92:	72 c0       	rjmp	.+228    	; 0x1c78 <app_start+0x1bc>

		for(int i = 0; i < 10; i++){
    1b94:	1a 82       	std	Y+2, r1	; 0x02
    1b96:	19 82       	std	Y+1, r1	; 0x01
    1b98:	0d c0       	rjmp	.+26     	; 0x1bb4 <app_start+0xf8>
			if(mode != NORMAL_MODE){break;}
    1b9a:	80 91 68 01 	lds	r24, 0x0168
    1b9e:	88 23       	and	r24, r24
    1ba0:	71 f4       	brne	.+28     	; 0x1bbe <app_start+0x102>
			delay(500);
    1ba2:	84 ef       	ldi	r24, 0xF4	; 244
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
		G_LED_PED = LED_on(GREEN_LED, LED_PED_PORT);

		/* Check if the Pedestrians mode is selected*/
		if(mode != NORMAL_MODE){break;}

		for(int i = 0; i < 10; i++){
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	8a 30       	cpi	r24, 0x0A	; 10
    1bba:	91 05       	cpc	r25, r1
    1bbc:	74 f3       	brlt	.-36     	; 0x1b9a <app_start+0xde>
			if(mode != NORMAL_MODE){break;}
			delay(500);
		}

		/* Check if the Pedestrians mode is selected*/
		if(mode != NORMAL_MODE){break;}
    1bbe:	80 91 68 01 	lds	r24, 0x0168
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <app_start+0x10c>
    1bc6:	58 c0       	rjmp	.+176    	; 0x1c78 <app_start+0x1bc>


		/* Cars & Pedestrians Yellow LEDs blinks for 5 seconds*/
		yellowBlinkNormalMode();
    1bc8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <yellowBlinkNormalMode>
    1bcc:	55 c0       	rjmp	.+170    	; 0x1c78 <app_start+0x1bc>
		break;

	case PEDESTRIAN_MODE:

		LED_on(MODE_PIN, MODE_PORT);
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
		/*Pedestrian can pass the street now for 5 seconds*/
		if(ON == R_LED_CAR && OFF == G_LED_CAR){
    1bd6:	80 91 6b 01 	lds	r24, 0x016B
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	b9 f4       	brne	.+46     	; 0x1c0c <app_start+0x150>
    1bde:	80 91 69 01 	lds	r24, 0x0169
    1be2:	88 23       	and	r24, r24
    1be4:	99 f4       	brne	.+38     	; 0x1c0c <app_start+0x150>
			/* Pedestrians mode case 1*/
			R_LED_CAR = LED_on(RED_LED, LED_CAR_PORT);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1bee:	80 93 6b 01 	sts	0x016B, r24
			G_LED_PED = LED_on(GREEN_LED, LED_PED_PORT);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1bfa:	80 93 6c 01 	sts	0x016C, r24
			delay(5000);
    1bfe:	88 e8       	ldi	r24, 0x88	; 136
    1c00:	93 e1       	ldi	r25, 0x13	; 19
    1c02:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
			end();
    1c06:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <end>
    1c0a:	34 c0       	rjmp	.+104    	; 0x1c74 <app_start+0x1b8>

		}
		/* Pedestrians have to wait for their green light to pass the street*/
		else{
			/* Pedestrians mode case 2*/
			if(G_LED_CAR == ON && Y_LED_CAR == OFF){
    1c0c:	80 91 69 01 	lds	r24, 0x0169
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	81 f5       	brne	.+96     	; 0x1c74 <app_start+0x1b8>
    1c14:	80 91 6a 01 	lds	r24, 0x016A
    1c18:	88 23       	and	r24, r24
    1c1a:	61 f5       	brne	.+88     	; 0x1c74 <app_start+0x1b8>
				G_LED_CAR=  LED_on(GREEN_LED, LED_CAR_PORT);
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1c24:	80 93 69 01 	sts	0x0169, r24
				R_LED_PED = LED_on(RED_LED, LED_PED_PORT);
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1c30:	80 93 6e 01 	sts	0x016E, r24

				yellowBlinkPedMode();
    1c34:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <yellowBlinkPedMode>

				R_LED_PED = LED_off(RED_LED, LED_PED_PORT);
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
    1c40:	80 93 6e 01 	sts	0x016E, r24
				G_LED_CAR=  LED_off(GREEN_LED, LED_CAR_PORT);
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 15 0c 	call	0x182a	; 0x182a <LED_off>
    1c4c:	80 93 69 01 	sts	0x0169, r24

				R_LED_CAR = LED_on(RED_LED, LED_CAR_PORT);
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1c58:	80 93 6b 01 	sts	0x016B, r24
				G_LED_PED = LED_on(GREEN_LED, LED_PED_PORT);
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	0e 94 03 0c 	call	0x1806	; 0x1806 <LED_on>
    1c64:	80 93 6c 01 	sts	0x016C, r24
				delay(5000);
    1c68:	88 e8       	ldi	r24, 0x88	; 136
    1c6a:	93 e1       	ldi	r25, 0x13	; 19
    1c6c:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
				end();
    1c70:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <end>
			}
		}
		mode = NORMAL_MODE;
    1c74:	10 92 68 01 	sts	0x0168, r1
		break;
	}
}
    1c78:	26 96       	adiw	r28, 0x06	; 6
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <Test_DIO_delay>:


/*Testing DIO driver*/

void Test_DIO_delay(){
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	DIO_init(PIN_0, PORT_A, output);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 8f 08 	call	0x111e	; 0x111e <DIO_init>
	DIO_toggle(PIN_0, PORT_A);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <DIO_toggle>
	delay(500);
    1ca4:	84 ef       	ldi	r24, 0xF4	; 244
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <Test_DIOread>:

void Test_DIOread(){
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	0f 92       	push	r0
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	uint8 buttonstate = 0;
    1cbc:	19 82       	std	Y+1, r1	; 0x01
	DIO_init(PIN_2, PORT_D, input);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	63 e0       	ldi	r22, 0x03	; 3
    1cc2:	40 e0       	ldi	r20, 0x00	; 0
    1cc4:	0e 94 8f 08 	call	0x111e	; 0x111e <DIO_init>
	DIO_read(PIN_2, PORT_D, &buttonstate);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	63 e0       	ldi	r22, 0x03	; 3
    1ccc:	9e 01       	movw	r18, r28
    1cce:	2f 5f       	subi	r18, 0xFF	; 255
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_read>
	if(buttonstate == HIGH){
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	c9 f4       	brne	.+50     	; 0x1d10 <Test_DIOread+0x5e>
		DIO_read(PIN_2, PORT_D, &buttonstate);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	63 e0       	ldi	r22, 0x03	; 3
    1ce2:	9e 01       	movw	r18, r28
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	a9 01       	movw	r20, r18
    1cea:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_read>
		delay(30);
    1cee:	8e e1       	ldi	r24, 0x1E	; 30
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
		if(buttonstate == HIGH){
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	79 f4       	brne	.+30     	; 0x1d1a <Test_DIOread+0x68>
			DIO_write(PIN_0, PORT_A, HIGH);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	41 e0       	ldi	r20, 0x01	; 1
    1d02:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_write>
			delay(30);
    1d06:	8e e1       	ldi	r24, 0x1E	; 30
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 45 0c 	call	0x188a	; 0x188a <delay>
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <Test_DIOread+0x68>
		}
	}else{
		DIO_write(PIN_0, PORT_A, LOW);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 81 09 	call	0x1302	; 0x1302 <DIO_write>
	}
}
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <main>:
#include "Application/application.h"

int main(void)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	app_init();
    1d2a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <app_init>
	while(1){
		app_start();
    1d2e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <app_start>
    1d32:	fd cf       	rjmp	.-6      	; 0x1d2e <main+0xc>

00001d34 <__prologue_saves__>:
    1d34:	2f 92       	push	r2
    1d36:	3f 92       	push	r3
    1d38:	4f 92       	push	r4
    1d3a:	5f 92       	push	r5
    1d3c:	6f 92       	push	r6
    1d3e:	7f 92       	push	r7
    1d40:	8f 92       	push	r8
    1d42:	9f 92       	push	r9
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	ca 1b       	sub	r28, r26
    1d5e:	db 0b       	sbc	r29, r27
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	09 94       	ijmp

00001d6c <__epilogue_restores__>:
    1d6c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d6e:	39 88       	ldd	r3, Y+17	; 0x11
    1d70:	48 88       	ldd	r4, Y+16	; 0x10
    1d72:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d74:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d76:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d78:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d7e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d80:	c8 84       	ldd	r12, Y+8	; 0x08
    1d82:	df 80       	ldd	r13, Y+7	; 0x07
    1d84:	ee 80       	ldd	r14, Y+6	; 0x06
    1d86:	fd 80       	ldd	r15, Y+5	; 0x05
    1d88:	0c 81       	ldd	r16, Y+4	; 0x04
    1d8a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d8e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d90:	ce 0f       	add	r28, r30
    1d92:	d1 1d       	adc	r29, r1
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	ed 01       	movw	r28, r26
    1da0:	08 95       	ret

00001da2 <_exit>:
    1da2:	f8 94       	cli

00001da4 <__stop_program>:
    1da4:	ff cf       	rjmp	.-2      	; 0x1da4 <__stop_program>
